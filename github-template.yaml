apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: mern-template
objects:
- kind: ImageStream
  apiVersion: v1
  metadata:
    annotations:
      descriptions: Keeps track of changes in for the api side
    name: mern-api
    labels: 
      app: ${APP_NAME}
- kind: ImageStream
  apiVersion: v1
  metadata:
    annotations:
      descriptions: Keeps track of changes in for the client side
    name: mern-client
    labels: 
      app: ${APP_NAME}

- kind: BuildConfig
  apiVersion: build.openshift.io/v1
  metadata:
    name: mern-api
    namespace: ${NAMESPACE}
    labels: 
      app: ${APP_NAME}
  spec:
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: mern-api:latest
    strategy:
      type: Docker
      dockerStrategy:
        DockerfilePath: Dockerfile
      postCommit: {}
    source:
      type: Git
      git:
        uri: ${GIT_URL}
        ref: ${GIT_BRANCH}
      contextDir: /api/
    triggers:
      - type: ConfigChange
    runPolicy: Serial
- kind: BuildConfig
  apiVersion: build.openshift.io/v1
  metadata:
    name: mern-client
    namespace: ${NAMESPACE}
    labels: 
      app: ${APP_NAME}
  spec:
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: mern-client:latest
    strategy:
      type: Docker
      dockerStrategy:
        dockerfilePath: Dockerfile
      postCommit: {}
    source:
      type: Git
      git:
        uri: ${GIT_URL}
        ref: ${GIT_BRANCH}
      contextDir: /client/
    triggers:
      - type: ConfigChange
    runPolicy: Serial

- kind: Deployment
  apiVersion: apps/v1
  metadata:
    name: mern-api
    namespace: ${NAMESPACE}
    labels: 
      app: ${APP_NAME}
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: mern-api
    template:
      metadata:
        labels:
          app: mern-api
      spec:
        containers:
          - name: container-api
            image: image-registry.openshift-image-registry.svc:5000/fe805a-prod/mern-api
            ports:
              - containerPort: 3001             
- kind: Deployment
  apiVersion: apps/v1
  metadata:
    name: mern-client
    namespace: ${NAMESPACE}
    labels: 
      app: ${APP_NAME}
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: mern-client
    template:
      metadata:
        labels:
          app: mern-client
      spec:
        containers:
          - name: container-client
            image:  image-registry.openshift-image-registry.svc:5000/fe805a-prod/mern-client
            ports:
              - containerPort: 3001

- kind: NetworkPolicy
  apiVersion: networking.k8s.io/v1
  metadata:
    name: allow-from-openshift-ingress
    namespace: ${NAMESPACE}
    labels: 
      app: ${APP_NAME}
  spec:
    # This policy allows any pod with a route & service combination
    # to accept traffic from the OpenShift router pods.
    ingress:
      - from:
          - namespaceSelector:
              matchLabels:
                network.openshift.io/policy-group: ingress
    podSelector: {}
    policyTypes:
      - Ingress
- kind: NetworkPolicy
  apiVersion: networking.k8s.io/v1
  metadata:
    name: allow-same-namespace
    namespace: ${NAMESPACE}
    labels: 
    app: ${APP_NAME}
  spec:
    # Allow all pods within the current namespace to communicate
    # to one another.
    podSelector:
    ingress:
    - from:
      - podSelector: {}      

- kind: Service
  apiVersion: v1
  metadata:
    annotations:
    name: mern-api
    namespace: ${NAMESPACE}
    labels:
      app: ${APP_NAME}
  spec:
    ports:
    - name: 3001-tcp
      protocol: TCP
      port: 3001
      targetPort: 3001
    selector:
      app: mern-api
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- kind: Service
  apiVersion: v1
  metadata:
    annotations:
    name: mern-client
    namespace: ${NAMESPACE}
    labels:
      app: ${APP_NAME}
  spec:
    ports:
    - name: 2015-tcp
      protocol: TCP
      port: 2015
      targetPort: 2015
    selector:
      app: mern-client
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}

- kind: Route
  apiVersion: route.openshift.io/v1
  metadata:
    name: mern-api
    namespace: ${NAMESPACE}
    labels:
      app: ${APP_NAME}
    annotations:
      haproxy.router.openshift.io/hsts: 'false'
  spec:
    to:
      kind: Service
      name: mern-api
      weight: 100
    port:
      targetPort: 3001-tcp
  wildcardPolicy: none
- kind: Route
  apiVersion: route.openshift.io/v1
  metadata:
    name: mern-client
    namespace: ${NAMESPACE}
    labels:
      app: ${APP_NAME}
    annotations:
      haproxy.router.openshift.io/hsts: 'false'
  spec:
    to:
      kind: Service
      name: mern-client
      weight: 100
    port:
      targetPort: 2015-tcp
  wildcardPolicy: none

### MONGO
- kind: Secret
  apiVersion: v1
  metadata:
    annotations:
      template.openshift.io/expose-admin_password: '{.data[''database-admin-password'']}'
      template.openshift.io/expose-database_name: '{.data[''database-name'']}'
      template.openshift.io/expose-password: '{.data[''database-password'']}'
      template.openshift.io/expose-username: '{.data[''database-user'']}'
    name: '${DATABASE_SERVICE_NAME}'
  stringData:
    database-admin-password: '${MONGODB_ADMIN_PASSWORD}'
    database-name: '${MONGODB_DATABASE}'
    database-password: '${MONGODB_PASSWORD}'
    database-user: '${MONGODB_USER}'
- kind: Service
  apiVersion: v1
  metadata:
    annotations:
      template.openshift.io/expose-uri: 'mongodb://{.spec.clusterIP}:{.spec.ports[?(.name=="mongo")].port}'
    name: '${DATABASE_SERVICE_NAME}'
  spec:
    ports:
      - name: mongo
        nodePort: 0
        port: 27017
        protocol: TCP
        targetPort: 27017
    selector:
      name: '${DATABASE_SERVICE_NAME}'
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    annotations:
      template.alpha.openshift.io/wait-for-ready: 'true'
    name: '${DATABASE_SERVICE_NAME}'
    labels:
      app.kubernetes.io/name: mongodb
      app.kubernetes.io/part-of: workshop
  spec:
    replicas: 1
    selector:
      name: '${DATABASE_SERVICE_NAME}'
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          name: '${DATABASE_SERVICE_NAME}'
      spec:
        containers:
          - resources:
              limits:
                memory: 100Mi
            readinessProbe:
              exec:
                command:
                  - /bin/sh
                  - '-i'
                  - '-c'
                  - >-
                    mongo 127.0.0.1:27017/$MONGODB_DATABASE -u $MONGODB_USER
                    -p $MONGODB_PASSWORD --eval="quit()"
              initialDelaySeconds: 3
              timeoutSeconds: 1
            terminationMessagePath: /dev/termination-log
            name: mongodb
            livenessProbe:
              initialDelaySeconds: 30
              tcpSocket:
                port: 27017
              timeoutSeconds: 1
            env:
              - name: MONGODB_USER
                valueFrom:
                  secretKeyRef:
                    key: database-user
                    name: '${DATABASE_SERVICE_NAME}'
              - name: MONGODB_PASSWORD
                valueFrom:
                  secretKeyRef:
                    key: database-password
                    name: '${DATABASE_SERVICE_NAME}'
              - name: MONGODB_ADMIN_PASSWORD
                valueFrom:
                  secretKeyRef:
                    key: database-admin-password
                    name: '${DATABASE_SERVICE_NAME}'
              - name: MONGODB_DATABASE
                valueFrom:
                  secretKeyRef:
                    key: database-name
                    name: '${DATABASE_SERVICE_NAME}'
            securityContext:
              capabilities: {}
              privileged: false
            ports:
              - containerPort: 27017
                protocol: TCP
            imagePullPolicy: IfNotPresent
            volumeMounts:
              - mountPath: /var/lib/mongodb/data
                name: '${DATABASE_SERVICE_NAME}-data'
            capabilities: {}
            image: ' '
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        volumes:
          - emptyDir:
              medium: ''
            name: '${DATABASE_SERVICE_NAME}-data'
    triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
            - mongodb
          from:
            kind: ImageStreamTag
            name: 'mongodb:${MONGODB_VERSION}'
            namespace: '${NAMESPACE}'
          lastTriggeredImage: ''
        type: ImageChange
      - type: ConfigChange
  status: {}

parameters:
- name: APP_NAME
  displayName: app name
  required: true
- name: NAMESPACE
  displayName: namespace
  required: true
- name: GIT_URL
  displayName: Git URL
  value: https://github.com/calbertan/Checklist-Mern
- name: GIT_BRANCH
  displayName: Git branch
  value: main
- name: DATABASE_SERVICE_NAME
  displayName: Database Service Name
  description: The name of the OpenShift Service exposed for the database.
  value: mongodb
- name: MONGODB_USER
  displayName: MongoDB Connection Username
  description: Username for MongoDB user that will be used for accessing the database.
  value: dbuser
- name: MONGODB_PASSWORD
  displayName: MongoDB Connection Password
  description: Password for the MongoDB connection user.
  value: dbpass
- name: MONGODB_DATABASE
  displayName: MongoDB Database Name
  description: Name of the MongoDB database accessed.
  value: sampledb
- name: MONGODB_ADMIN_PASSWORD
  displayName: MongoDB Admin Password
  description: Password for the database admin user.
  generate: expression
  from: '[a-zA-Z0-9]{16}'
- name: MONGODB_VERSION
  displayName: Version of MongoDB Image
  description: Version of MongoDB image to be used (3.6 or latest).
  value: '3.6'